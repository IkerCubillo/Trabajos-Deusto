import java.util.regex.Pattern;

/**
 * 
 * @author CS2334, modified by ??
 * @version 2017-09-12
 * Lab 5
 * 
 * The Calculator class provides functionality for parsing input strings
 * that contain simple expressions and for computing the result of the expression.
 *
 */

public class Calculator 
{
    /**
     * This constructor has been added to trick the code coverage measure into 
     * doing the right thing
     */
    public Calculator()
    {
        // Constructor does nothing
    }

    /**
     * Compute the result of the expression encoded in a sequence of tokens.
     * 
     * Here are the different cases:
     * 0 tokens: IllegalInputException: "Illegal Token Length"
     * 1 token: 
     *      "quit" (any casing): QuitException
     *      All other cases: IllegalInputException: "Illegal Argument"
     * 2 tokens:
     *      "-" and any number: return negative of number
     *      "-" and not a number: IllegalInputException: "Illegal Argument"
     *      other string and any string: IllegalInputException: "Illegal Operator"
     * 3 tokens:
     *      number1, "+", number2: return sum of two numbers
     *      number1, "/", zero: DivideByZeroException
     *      number1, "/", not zero: return number1/number2
     *      not a number, anything, anything: IllegalInputException: "Illegal Argument"
     *      number1, anything, not a number: IllegalInputException: "Illegal Argument"
     *      number1, not an operator, number2: IllegalInputException: "Illegal Operator"
     * 4 or more tokens: IllegalInputException: "Illegal Token Length"
     *     
     * Note: all numbers are integers
     * 
     * @param tokens The array of tokens to evaluate
     * @return int result of evaluating the expression
     * @throws CalculatorException If some form of error has been generated or
     * "quit" has been typed. Throws one of the several child classes of CalculatorException
     * in order to give more information on what the error is.
     */
    public static int compute(String[] tokens) throws CalculatorException
    {
        // Condition on the number of tokens
        switch(tokens.length)
        {
            case 0:
                // TODO: complete the cases
            	throw new IllegalInputException("Illegal Token Length");
            case 1:
                // Only case: quit
                // TODO: complete the cases
            	if(tokens[0].toUpperCase().equals("QUIT")) {
            		throw new QuitException();	
            	}
            	else {
            		throw new IllegalInputException("Illegal Argument");
            	}
            case 2:
            	if(tokens[0].equals("-")){
            		if(tokens[1].matches("\\d+")) {
            			return -Integer.parseInt(tokens[1]);
            		} else {
            			throw new IllegalInputException("Illegal Argument");
            		}
            	} else {
            		throw new IllegalInputException("Illegal Operator");
            	}
                // Only case: negation
                // TODO: complete the cases

            case 3:
                // Binary operator
            	int number1 = 0;
            	String operator = tokens[1];
            	int number2 = 0;
                // TODO: complete the cases
            	
            		//     *      number1, "/", zero: DivideByZeroException
            		//     *      number1, "/", not zero: return number1/number2
            	
            	if (tokens[0].matches("\\dt")) {
            		number1 = Integer.parseInt(tokens[0]);
            		if (tokens[2].matches("\\dt")){
                		if (operator.equals("+") || operator.equals("/")) {
                			if (operator.equals("+")){
                				return sum of two numbers
                			}
                			
                			
                		} else {
                			throw new IllegalInputException("Illegal Operator");
                		}
            		} else {
            			throw new IllegalInputException("Illegal Argument");
            		}
            		
            	} else {
            		throw new IllegalInputException("Illegal Argument");
            	}
            	
            	
            default:
                // 4 or more tokens
                // TODO: complete the cases
            	throw new IllegalInputException("Illegal Token Length");
        }
    }

	/**
     * Parse the input string as an expression and evaluate it.
     * 
     * If the input is a legal expression, then the result is printed
     * 
     * Otherwise a CalculatorException has occurred.  Print a message based on
     * what exception type it is.
     * 
     * Always print out what the input was. Use a finally block for this.
     * 
     * Always prints out two lines, following the rules:
     * 1st line:
     * -No Exception: "The result is: " + result
     * -QuitException: "Quitting"
     * -DivideByZeroException: "Tried to divide by zero"
     * -IllegalInputException: "Illegal input: " + illegalinputtype(given to constructor)
     * -CalculatorException: <should never happen> e.getMessage()
     * 2nd line:
     * "Input was: " + input
     * 
     * @param input A String possibly containing a mathematical expression
     * @return true if the String is equal to "quit"; false otherwise
     */
    public static boolean parseAndCompute(String input)
    {
        // Pull out the tokens
        String[] tokens = input.split(" ");
        try 
        {
        	System.out.println("The result is" + compute(tokens));
            // TODO: complete implementation.
        }
        catch (QuitException e)
        {
        	System.out.println("Quitting");
            // TODO: complete implementation.
        }
        catch (IllegalInputException e)
        {
        	System.out.println("Illegal input: " + e.getExceptionType());
        	System.out.println("Input was: " + input);
            // TODO: complete implementation.
        }
        catch (CalculatorException e)
        {
        	if (e instanceof DivideByZeroException) {
				System.out.println("Tried to divide by zero");
				System.out.println("Input was: " + input);
			}
        		
            // This catches the remaining CalculatorException case: DivideByZeroException
            // We are doing it this way so that ECLEMMA (code coverage measure) is happy
            // TODO: complete implementation.
        }

        // TODO: complete implementation.

        // Quit has not been specified
        return false;
    }
}
