package examen202106ordpreparatorio;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.*;

import javax.swing.JOptionPane;

import examen202106ord.CitaMedica;
import examen202106ord.EspecialidadMedica;

/** Clase principal del gestor de agenda
 * @author andoni.eguiluz @ ingenieria.deusto.es
 */
public class GestorAgenda {

	/** Método principal de ejecución del ejercicio
	 * @param args	No utilizado
	 */
	public static void main(String[] args) {
		GestorAgenda mgt = new GestorAgenda();
		mgt.lanza();
	}
	
	// =================== Constantes static
	
	public static final int ANCHURA_VENTANA = 1000;   // Píxels de ancho
	public static final int ALTURA_VENTANA = 800;     // Píxels de alto
	
	// =================== Parte no static
	
	VentanaAgenda ventana;
	ArrayList<EspacioAgenda> listaAgenda;
	
	/** Crea el gestor de agenda con una ventana gráfica asociada de tamaño {@link #ANCHURA_VENTANA} x {@link #ALTURA_VENTANA}
	 */
	public GestorAgenda() {
		ventana = new VentanaAgenda( ANCHURA_VENTANA, ALTURA_VENTANA, this );
		listaAgenda = new ArrayList<>();
	}
	
	/** Devuelve la ventana de la agenda
	 * @return	ventana que corresponde
	 */
	public VentanaAgenda getVentana() {
		return ventana;
	}

	/** Devuelve la lista de elementos de agenda gestionada
	 * @return	Lista de slots de agenda
	 */
	public ArrayList<EspacioAgenda> getListaAgenda() {
		return listaAgenda;
	}

	/** Ejecuta el gestor de agenda, lanzando el proceso de ejecución principal
	 */
	public void lanza() {
		initDatos();
		ventana.setFechaInicial( new Date() );
		ventana.setMensajeSuperior( "Pulsa los botones de flecha para mover días en la agenda, arrastra para cambiar de fecha, a la papelera para borrar, click para crear" );
		ventana.setVisible( true );
	}

	// Proceso de inicializar datos de la ventana de trabajo
	private void initDatos() {
		// Inicializa unos datos de prueba
		Cita cita = new Cita( ventana, new Date( System.currentTimeMillis() ), 60 );
		cita.setDescripcion( "Trabajo de mates" );
		cita.setPersona( "Andoni" );
		Tarea tarea = new Tarea( ventana, new Date( System.currentTimeMillis() - 6*3600000L + 2*24*3600000L), 75 ); // Dos días después 6 horas antes
		tarea.setDescripcion( "Padel con Eva" );
		tarea.setTipoTarea( TipoTarea.DEPORTE );
		Tarea tarea2 = new Tarea( ventana, new Date( System.currentTimeMillis() - 5*3600000L + 3600000L/2 + 2*24*3600000L), 120 );  // Dos días después, 4:30 horas antes
		tarea2.setDescripcion( "Paseo con Luis" );
		tarea2.setTipoTarea( TipoTarea.OCIO );
		CitaMedica citaMedica = new CitaMedica  (ventana, new Date(System.currentTimeMillis() + 3600000L*2), 40, EspecialidadMedica.DERMATOLOGIA);
		citaMedica.setDescripcion("Cita dermatologia");
		citaMedica.setPersona( "Sandra" );
		
		anyadirEspacio( cita );
		anyadirEspacio( tarea );
		anyadirEspacio( tarea2 );
		anyadirEspacio(citaMedica);
	}
	
	/** Añade un espacio a la agenda
	 * @param espacio	Espacio a añadir
	 */
	public void anyadirEspacio( EspacioAgenda espacio ) {
		listaAgenda.add( espacio );
		ventana.getPanel().add( espacio );
		ventana.repaint();
	}
	
	public void borrarAgendaActual( boolean pideConfirmacion ) {
		if (pideConfirmacion) {
			int resp = JOptionPane.showConfirmDialog( ventana, "¿Confirmas el borrado de toda esta agenda?" );
			if (resp==JOptionPane.OK_OPTION) {
				pideConfirmacion = false;
			}
		}
		if (!pideConfirmacion) {  // Si se ha confirmado o si no se necesita confirmación de usuario se borra
			listaAgenda = new ArrayList<>();
			ventana.getPanel().removeAll();
			ventana.repaint();
		}
	}
	
	/**	Crea un espacio en la agenda pidiendo los datos interactivamente al usuario
	 * @param fecha	Fecha y hora en la que quiere crearse el espacio
	 */
	public void crearEspacioInteractivo( Date fecha ) {
		if (fecha != null) {  // Se puede crear
			// 1.- Elegir qué espacio se genera
			Object entrada = JOptionPane.showInputDialog( ventana, "Elige espacio a generar:", "Creación", JOptionPane.INFORMATION_MESSAGE, null, EspacioAgenda.TIPOS_DE_ESPACIOS, "Tarea" );
			if (entrada!=null) {
				// 2.- Definir duración
				String duracion = JOptionPane.showInputDialog( "Introduce duración en minutos: ", 60 );
				try {
					int dur = Integer.parseInt( duracion );
					// 3.- Crear espacio
					EspacioAgenda nuevo = EspacioAgenda.crearNuevoEspacio( (String)entrada, ventana, fecha, dur );
					// 4.- Pedir resto de datos (personalizados)
					if (nuevo instanceof Editable) {
						((Editable)nuevo).editar();
					}
					anyadirEspacio( nuevo );
				} catch (Exception e) {
					// Error en entrada - no se genera slot
				}
			}
		}
	}
	
	public void clickEnEspacio( EspacioAgenda espacio ) {
		if (espacio instanceof Editable) {
			((Editable) espacio).editar();
			ventana.repaint();
		}
	}
	
	public void dragEnEspacio( Movible espacioMovible, int difX, int difY ) {
		espacioMovible.mover( espacioMovible.getX()+difX, espacioMovible.getY()+difY );
	}
	
	public void finDragEnEspacio( EspacioAgenda espacio, Point puntoFinal ) {
		Date fechaEnEspacio = ventana.getFechaDePunto( espacio.getX() + espacio.getWidth()/2, espacio.getY() );
		if (fechaEnEspacio == null) { // Está fuera de la pantalla
			Rectangle rectanguloBoton = new Rectangle( ventana.getBotonTrash().getLocationOnScreen(), ventana.getBotonTrash().getSize() );
			if (rectanguloBoton.contains(puntoFinal)) { // Encima de botón trash: el espacio se borra
				listaAgenda.remove( espacio );
				ventana.getPanel().remove( espacio );
				ventana.repaint();
			} else {  // Fuera de ventana en otro lugar: el espacio se recoloca en su lugar inicial
				recolocaEspacioEnSuOrigen( espacio );
			}
		} else {
			espacio.setFechaHora( fechaEnEspacio );
			espacio.recalculaPosicion();
			ventana.repaint();
		}
	}
	
	private void recolocaEspacioEnSuOrigen( EspacioAgenda espacio ) {
		espacio.recalculaPosicion();  // Hay que llamar a este método para volver a poner el espacio en su fecha-hora original 
	}
	
}
